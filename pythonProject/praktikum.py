# bremen_musicians = ['–ö–æ—Ç', '–ü—ë—Å', '–¢—Ä—É–±–∞–¥—É—Ä', '–û—Å—ë–ª', '–ü–µ—Ç—É—Ö']
# for i in range(len(bremen_musicians)):
#     print(bremen_musicians[i])

#
# def check(i, b):
#     check = (i == b)
#     print(check)
#
# check(1,1)


# # –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é rooms_equal() —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ room_size –∏ room_list
# def rooms_equal(room_size, room_list):
#     # –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±—ä—è–≤–∏–ª–∏
#     count = 0
#
#     for room in room_list:
#         if room == room_size:
#             count += 1
#
#
#     print('–ö–æ–º–Ω–∞—Ç –ø–ª–æ—â–∞–¥—å—é', room_size, '–∫–≤.–º:', count)
#
# # –°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –∏ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
# flat = [
#     5.55, 22.19, 7.78, 26.86, 5.55,
#     29.84, 22.19, 5.55, 16.85, 4.52
# ]
#
# hut = [9.2, 3.5, 8.1, 2.3, 9.2, 4.2, 6.9]
#
# rooms_equal(5.55, flat)
# # –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–∏–Ω –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ rooms_equal()
# # –ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏—Å–∫–æ–º—É—é –ø–ª–æ—â–∞–¥—å - 9.2 –∫–≤.–º –∏ —Å–ø–∏—Å–æ–∫ hut
# rooms_equal(9.2, hut)


# may_2017 = [24, 26, 15, 10, 15, 19, 10, 1, 4, 7, 7, 7, 12, 14, 17, 8, 9, 19, 21, 22, 11, 15, 19, 23, 15, 21, 16, 13, 25,
#             17, 19]
# may_2018 = [20, 27, 23, 18, 24, 16, 20, 24, 18, 15, 19, 25, 24, 26, 19, 24, 25, 21, 17, 11, 20, 21, 22, 23, 18, 20, 23,
#             18, 22, 23, 11]
#
#
# def comfort_count(temperatures):
#     # –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
#     count = 0
#     for day in temperatures:
#         if day in range(22, 27):
#             count += 1
#     print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—ë–ø–ª—ã—Ö –¥–Ω–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:", count)
#
#
# # –î–∞–ª—å—à–µ –∫–æ–¥ –Ω–µ –º–µ–Ω—è–π—Ç–µ
# comfort_count(may_2017)  # –£–∑–Ω–∞–µ–º, —á—Ç–æ –±—ã–ª–æ –≤ –º–∞–µ 2017 –≥.
# comfort_count(may_2018)  # –£–∑–Ω–∞–µ–º, —á—Ç–æ –±—ã–ª–æ –≤ –º–∞–µ 2018 –≥.



# def func_one():  #—Ä–µ–∫—É—Ä—Å–∏—è(–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)
#     print('–†–∞–∑')
#     func_two()
#
# def func_two():
#     print('–î–≤–∞')
#     func_one()
#
# func_one() # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é func_one()


#
# lst = [1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7]
# s = set(lst)
# print(s)


# def print_valid_cities(a, b):
#     c = a.difference(b)
#     # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞
#     # –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã all_cities –∏ used_cities,
#     # –∞ –∑–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
#
# all_cities = {
#     '–ê–±–∞–∫–∞–Ω',
#     '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å',
#     '–ë–æ–±—Ä—É–π—Å–∫',
#     '–ö–∞–ª—É–≥–∞',
#     '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞',
#     '–ö–æ—Å—Ç—Ä–æ–º–∞',
#     '–õ–∏–ø–µ—Ü–∫',
#     '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'
# }
#
# used_cities = {'–ö–∞–ª—É–≥–∞', '–ê–±–∞–∫–∞–Ω' , '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'}
#
# print_valid_cities(all_cities, used_cities)



# def get_together_games(a, b):
#     for i in a:
#         if i in b:
#             print("üëæ", i)
#
# anfisa_games = [
#     'Online-chess',
#     '–ì–æ—Ä–æ–¥–∞',
#     'DOOM',
#     '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'
# ]
# alisa_games = [
#     'DOOM',
#     'Online-chess',
#     '–ì–æ—Ä–æ–¥–∞',
#     'GTA',
#     'World of tanks'
# ]
# # –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏–≥—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# get_together_games(anfisa_games, alisa_games)


# DATABASE = {
#     '–°–µ—Ä—ë–≥–∞': '–û–º—Å–∫',
#     '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
#     '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
#     '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#     '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
#     '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
#     '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
# }
#
# def process_anfisa(query):
#     if query == '–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
#         count = len(DATABASE)
#         return '–£ —Ç–µ–±—è ' + str(count) + ' –¥—Ä—É–∑–µ–π.'
#
#
#     elif query == '–ö—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#         friends_string = ''
#
#         for i in DATABASE:
#             friends_string += i + " "
#         return friends_string
#
#     elif query == '–ì–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#         unique_cities = set(DATABASE.values())
#         string = ''
#         for k in unique_cities:
#             string += k + ' '
#         return string
#
#     else:
#         return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#
# # –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥
# print('–ü—Ä–∏–≤–µ—Ç, —è –ê–Ω—Ñ–∏—Å–∞!')
# print(process_anfisa('–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?'))
# print("–¢–≤–æ–∏ –¥—Ä—É–∑—å—è:", process_anfisa('–ö—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
# print(f"–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {process_anfisa('–ì–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?')}")





# DATABASE = {
#     '–°–µ—Ä—ë–≥–∞': '–û–º—Å–∫',
#     '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
#     '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
#     '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#     '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
#     '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
#     '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
# }


# # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, —Å–∫–ª–æ–Ω—è—è —Å–ª–æ–≤–æ "–¥—Ä—É–∑—å—è"
# # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ friends_count
# def format_friends_count(friends_count):
#     if friends_count == 1:
#         return '1 –¥—Ä—É–≥'
#     elif 2 <= friends_count <= 4:
#         return f'{friends_count} –¥—Ä—É–≥–∞'
#     else:
#         return f'{friends_count} –¥—Ä—É–∑–µ–π'
#
#
# def process_anfisa(query):
#     if query == '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
#         count = len(DATABASE)
#         # –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é format_friends_count() –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤ –Ω–µ—ë count.
#         # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ: –≤ –Ω–µ–π –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏–µ,
#         # –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–Ω—ë—Ç —Ñ—É–Ω–∫—Ü–∏—è format_friends_count()
#         return f'–£ —Ç–µ–±—è {format_friends_count(count)}.'
#
#     elif query == '–∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#         friends_string = ', '.join(DATABASE)
#         return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: {friends_string}'
#
#     elif query == '–≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#         unique_cities = set(DATABASE.values())
#         cities_string = ', '.join(unique_cities)
#         return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {cities_string}'
#     else:
#         return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#
#
# def process_query(query):
#     lis = query.split(', ')
#     if lis[0] == '–ê–Ω—Ñ–∏—Å–∞':
#         return process_anfisa(" ".join(lis[1:]))
#     else:
#         return process_friend(lis[0], " ".join(lis[1:]))
#
#
# def process_friend(name, query):
#     if name in DATABASE:
#         if '—Ç—ã –≥–¥–µ?' in query:
#             return f'{name} –≤ –≥–æ—Ä–æ–¥–µ {DATABASE[name]}'
#         else:
#             return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#     else:
#         return f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ {name}'
#
#
# print('–ü—Ä–∏–≤–µ—Ç, —è –ê–Ω—Ñ–∏—Å–∞!')
# print(process_query('–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?'))
# print(process_query('–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
# print(process_query('–ê–Ω—Ñ–∏—Å–∞, –≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
# print(process_query('–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç?'))
# print(process_query('–°–æ–Ω—è, —Ç—ã –≥–¥–µ?'))
# print(process_query('–ö–æ–ª—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?'))
# print(process_query('–ê–Ω—Ç–æ–Ω, —Ç—ã –≥–¥–µ?'))
#
#
#
# # –î–∞–ª—å—à–µ —Å–ª–µ–¥—É–µ—Ç –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é; –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –µ–≥–æ:
# queries = [
#     '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
#     '–ê–Ω–¥—Ä–µ–π, –Ω—É –≥–¥–µ —Ç—ã –±—ã–ª?',
#     '–ê–Ω–¥—Ä–µ–π, –Ω—É –æ–±–Ω–∏–º–∏ –º–µ–Ω—è —Å–∫–æ—Ä–µ–π!',
#     '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'
# ]







# from random import choice
#
# def find_a_present(prizes):
#     return choice(prizes)
#
# print(find_a_present(['–∫—É–∫–ª–∞', '–∂–≤–∞—á–∫–∞', '–∏–≥—Ä—É—à–µ—á–Ω—ã–π –ø–∏—Ç–æ–Ω']))
# print(find_a_present(['–º—è—á', '—á–µ–±—É—Ä–∞—à–∫–∞', '–ª–æ—Å—è—à']))
#
#
# import random as r
#
# # –¢–µ–ø–µ—Ä—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ random –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Å–µ–≤–¥–æ–Ω–∏–º r:
# print(r.randint(0, 100)) # –°–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100




#
# import datetime as dt
#
# # –í–∑–ª—ë—Ç: 1961 –≥–æ–¥, 12 –∞–ø—Ä–µ–ª—è, 9 —á–∞—Å–æ–≤ —É—Ç—Ä–∞, 7 –º–∏–Ω—É—Ç
# start_time = dt.datetime(1961, 4, 12, 9, 7, 0)
#
# print('–£–∂–µ', start_time, '–ü–æ–µ—Ö–∞–ª–∏!')
#
#
#
# import datetime as dt
#
# start_day = dt.datetime(1961, 4, 12)
#
# print(start_day)
#
#
# import datetime as dt
#
# start_time = dt.datetime(1961, 4, 12, 9, 7, 0)
#
# # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏: 1961 –≥–æ–¥, 12 –∞–ø—Ä–µ–ª—è, 10 —á–∞—Å–æ–≤, 55 –º–∏–Ω—É—Ç
# landing_time = dt.datetime(1961, 4, 17, 18, 55, 0)
#
# print(landing_time - start_time)





# import datetime as dt
#
# # –ö–∞–∫ –∏ —Ä–∞–Ω—å—à–µ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC
# utc_time = dt.datetime.utcnow()
#
# # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç—Ä–∏ —á–∞—Å–∞
# period = dt.timedelta(hours=3)
#
# # –ò –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –∑–Ω–∞—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø–æ UTC –ø–æ–ø—Ä–∞–≤–∫—É –≤ —Ç—Ä–∏ —á–∞—Å–∞:
# moscow_time = utc_time + period
#
# # –ü–µ—á–∞—Ç–∞–µ–º
# print(moscow_time)





# import datetime as dt
#
# UTC_OFFSET = {
#     '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
#     '–ú–æ—Å–∫–≤–∞': 3,
#     '–°–∞–º–∞—Ä–∞': 4,
#     '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
#     '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 5,
#     '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 3,
#     '–ö–∞–∑–∞–Ω—å': 3,
#     '–ß–µ–ª—è–±–∏–Ω—Å–∫': 5,
#     '–û–º—Å–∫': 6,
#     '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 3,
#     '–£—Ñ–∞': 5,
#     '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 7,
#     '–ü–µ—Ä–º—å': 5,
#     '–í–æ—Ä–æ–Ω–µ–∂': 3,
#     '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 3,
#     '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 3,
#     '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 2
# }
#
# def what_time(city):
#     delta = dt.timedelta(hours = UTC_OFFSET[city])
#     return dt.datetime.utcnow() + delta
#     # –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏;
#     # –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ city
#
# print(what_time('–ö–∞–∑–∞–Ω—å'))
# print(what_time('–ü–µ—Ä–º—å'))
# print(what_time('–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥'))







# DATABASE = {
#     '–°–µ—Ä–≥–µ–π': '–û–º—Å–∫',
#     '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
#     '–ê–ª–µ–∫—Å–µ–π': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
#     '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
#     '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#     '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
#     '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
#     '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
#     '–ê—Ä—Ç—ë–º': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
#     '–ü–µ—Ç—è': '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞'
# }
#
# UTC_OFFSET = {
#     '–ú–æ—Å–∫–≤–∞': 3,
#     '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
#     '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
#     '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 5,
#     '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 3,
#     '–ö–∞–∑–∞–Ω—å': 3,
#     '–ß–µ–ª—è–±–∏–Ω—Å–∫': 5,
#     '–û–º—Å–∫': 6,
#     '–°–∞–º–∞—Ä–∞': 4,
#     '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 3,
#     '–£—Ñ–∞': 5,
#     '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 7,
#     '–í–æ—Ä–æ–Ω–µ–∂': 3,
#     '–ü–µ—Ä–º—å': 5,
#     '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 3,
#     '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 3,
#     '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 2,
#     '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 10
# }
#
#
# def format_count_friends(count_friends):
#     if count_friends == 1:
#         return '1 –¥—Ä—É–≥'
#     elif 2 <= count_friends <= 4:
#         return f'{count_friends} –¥—Ä—É–≥–∞'
#     else:
#         return f'{count_friends} –¥—Ä—É–∑–µ–π'
#
# import datetime as dt
# def what_time(city):
#     offset = UTC_OFFSET[city]
#     city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
#     f_time = city_time.strftime("%H:%M")
#     return f_time
#
#
# def process_anfisa(query):
#     if query == '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
#         count = len(DATABASE)
#         return f'–£ —Ç–µ–±—è {format_count_friends(count)}.'
#     elif query == '–∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#         friends_string = ', '.join(DATABASE)
#         return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: {friends_string}'
#     elif query == '–≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#         unique_cities = set(DATABASE.values())
#         cities_string = ', '.join(unique_cities)
#         return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {cities_string}'
#     else:
#         return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#
#
# def process_friend(name, query):
#     if name in DATABASE:
#         city = DATABASE[name]
#         if query == '—Ç—ã –≥–¥–µ?':
#             return f'{name} –≤ –≥–æ—Ä–æ–¥–µ {city}'
#         elif query == '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?':
#             if city in UTC_OFFSET:
#                 return '–¢–∞–º —Å–µ–π—á–∞—Å ' + str(what_time(city))
#         else:
#             return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#
#     else:
#         return f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ {name}'
#
#
# def process_query(query):
#     elements = query.split(', ')
#     if elements[0] == '–ê–Ω—Ñ–∏—Å–∞':
#         return process_anfisa(elements[1])
#     else:
#         return process_friend(elements[0], elements[1])
#
#
# def runner():
#     queries = [
#         '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
#         '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
#         '–ê–Ω—Ñ–∏—Å–∞, –≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
#         '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç?',
#         '–ö–æ–ª—è, —Ç—ã –≥–¥–µ?',
#         '–°–æ–Ω—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?',
#         '–ê–Ω—Ç–æ–Ω, —Ç—ã –≥–¥–µ?',
#         '–ê–ª–µ–∫—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
#         '–ê—Ä—Ç—ë–º, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
#         '–ê–Ω—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
#         '–ü–µ—Ç—è, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?'
#     ]
#     for query in queries:
#         print(query, '-', process_query(query))
#
# runner()








# import urllib.parse
#
#
# url = 'https://yandex.ru/search/?text=%D0%BA%D0%B0%D0%BA%20%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D0%BE%20%D0%B5%D0%B7%D0%B4%D0%B8%D1%82%D1%8C%20%D0%BD%D0%B0%20%D1%82%D0%B0%D0%BA%D1%81%D0%B8'
#
# # —á—Ç–æ–±—ã –≤—ã—á–ª–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
# # —Ä–∞–∑–±–µ–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ –∑–Ω–∞–∫—É = –∏ –≤–æ–∑—å–º–∏—Ç–µ
# # –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è —Å–ø–∏—Å–∫–∞
# question = url.split('=')[1] # —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π question
#
# # –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω –∑–∞–ø—Ä–æ—Å –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
# print(urllib.parse.unquote(question)) # –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å



#
# import requests
#
# # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å:
# response = requests.get('http://info.cern.ch/')
#
# print(response.text)  # –ü–µ—á–∞—Ç–∞–µ–º –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.





#
# import requests
#
# url = 'http://wttr.in/?0T'
#
# response = requests.get(url)  # –≤—ã–ø–æ–ª–Ω–∏—Ç–µ HTTP-–∑–∞–ø—Ä–æ—Å
#
# print(response.text)  # –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç HTTP-–æ—Ç–≤–µ—Ç–∞



#
# import requests
#
# url = 'https://wttr.in'
#
# weather_parameters = {
#     '0': '',
#     'T': '',  # —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
#     'M': '',
# }
#
# request_headers = {
#     'Accept-Language': 'ru'# –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
# }
#
# # –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ http-–∑–∞–ø—Ä–æ—Å
# # —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã `params` –∏ `headers` —Ñ—É–Ω–∫—Ü–∏–∏ get()
# response = requests.get(url, headers=request_headers, params=weather_parameters)
# print(response.text)





# # –≤–æ—Ç —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
# def calc_share(apples, friends):
#     # –æ—Ç —Å—Ç—Ä–æ–∫–∏ –æ—Ç–∫—É—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É int
#     friends_number = int(friends.split()[0])
#     return apples/friends_number
#
# # –µ—Å—Ç—å 17 —è–±–ª–æ–∫
# apples = 17
#
# # –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∫–∞–∂–¥–æ–º—É –¥—Ä—É–≥—É
# # –≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é calc_share() –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞—à–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö,
# # —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º –¥—Ä—É–∑–µ–π
# for friends in ['7 –¥—Ä—É–∑–µ–π', '2 –¥—Ä—É–≥–∞', '0 –¥—Ä—É–∑–µ–π', '–æ–¥–∏–Ω –≤—Ä–∞–≥']:
#         try:
#                 print('–ö–∞–∂–¥–æ–º—É –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ', calc_share(apples, friends), '—è–±–ª–æ–∫–∞')
#         except ZeroDivisionError:
#                 print('–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.')
#         except ValueError:
#                 print(f'–ò–∑ —Å—Ç—Ä–æ–∫–∏ "{friends}" –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å —á–∏—Å–ª–æ.')





# import requests
#
# cities = [
#     '–û–º—Å–∫',
#     '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
#     '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#     '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
#     '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
#     '–ú–æ—Å–∫–≤–∞',
#     '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
# ]
#
#
# def make_url(city):
#     return f'http://wttr.in/{city}'
#
#
# def make_parameters():
#     params = {
#         'format': 2,  # –ø–æ–≥–æ–¥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
#         'M': ''  # —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ "–º/—Å"
#     }
#     return params
#
#
# def what_weather(city):
#     try:
#         response = requests.get(make_url(city), params=make_parameters())
#     except requests.ConnectionError:
#         return '<—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞>'
#     if response.status_code == 200:
#         return response.text
#     else:
#         return '<–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–≥–æ–¥—ã>'
#     # –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–æ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
#     # –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥!
#
#
# print('–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–∞—Ö:')
# for city in cities:
#     print(city, what_weather(city))












import datetime as dt
import requests

DATABASE = {
    '–°–µ—Ä–≥–µ–π': '–û–º—Å–∫',
    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
    '–ê–ª–µ–∫—Å–µ–π': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
    '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ê—Ä—Ç—ë–º': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
    '–ü–µ—Ç—è': '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞'
}

UTC_OFFSET = {
    '–ú–æ—Å–∫–≤–∞': 3,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 5,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 3,
    '–ö–∞–∑–∞–Ω—å': 3,
    '–ß–µ–ª—è–±–∏–Ω—Å–∫': 5,
    '–û–º—Å–∫': 6,
    '–°–∞–º–∞—Ä–∞': 4,
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 3,
    '–£—Ñ–∞': 5,
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 7,
    '–í–æ—Ä–æ–Ω–µ–∂': 3,
    '–ü–µ—Ä–º—å': 5,
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 3,
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 3,
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 2,
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 10
    }


def format_count_friends(count_friends):
    if count_friends == 1:
        return '1 –¥—Ä—É–≥'
    elif 2 <= count_friends <= 4:
        return f'{count_friends} –¥—Ä—É–≥–∞'
    else:
        return f'{count_friends} –¥—Ä—É–∑–µ–π'


def what_time(city):
    offset = UTC_OFFSET[city]
    city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
    f_time = city_time.strftime("%H:%M")
    return f_time


def what_weather(city):
    url = f'http://wttr.in/{city}'
    weather_parameters = {
        'format': 2,
        'M': ''
    }
    try:
        response = requests.get(url, params=weather_parameters)
    except requests.ConnectionError:
        return '<—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞>'
    if response.status_code == 200:
        return response.text
    else:
        return '<–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–≥–æ–¥—ã>'


def process_anfisa(query):
    if query == '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
        count = len(DATABASE)
        return f'–£ —Ç–µ–±—è {format_count_friends(count)}.'
    elif query == '–∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        friends_string = ', '.join(DATABASE)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: {friends_string}'
    elif query == '–≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {cities_string}'
    else:
        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'


def process_friend(name, query):
    if name in DATABASE:
        city = DATABASE[name]
        if query == '—Ç—ã –≥–¥–µ?':
            return f'{name} –≤ –≥–æ—Ä–æ–¥–µ {city}'
        elif query == '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?':
            if city not in UTC_OFFSET:
                return f'<–Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ {city}>'
            time = what_time(city)
            return f'–¢–∞–º —Å–µ–π—á–∞—Å {time}'
        elif query == '–∫–∞–∫ –ø–æ–≥–æ–¥–∞?':
            return what_weather(city)
        else:
            return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
    else:
        return f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ {name}'


def process_query(query):
    elements = query.split(', ')
    if elements[0] == '–ê–Ω—Ñ–∏—Å–∞':
        return process_anfisa(elements[1])
    else:
        return process_friend(elements[0], elements[1])


def runner():
    queries = [
        '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
        '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
        '–ê–Ω—Ñ–∏—Å–∞, –≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
        '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç?',
        '–ö–æ–ª—è, —Ç—ã –≥–¥–µ?',
        '–°–æ–Ω—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?',
        '–ê–Ω—Ç–æ–Ω, —Ç—ã –≥–¥–µ?',
        '–ê–ª–µ–∫—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ê—Ä—Ç—ë–º, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ê–Ω—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ü–µ—Ç—è, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ö–æ–ª—è, –∫–∞–∫ –ø–æ–≥–æ–¥–∞?',
        '–°–æ–Ω—è, –∫–∞–∫ –ø–æ–≥–æ–¥–∞?',
        '–ê–Ω—Ç–æ–Ω, –∫–∞–∫ –ø–æ–≥–æ–¥–∞?'
    ]
    for query in queries:
        print(query, '-', process_query(query))
#
# runner()

